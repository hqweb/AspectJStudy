import com.android.build.gradle.*
import org.aspectj.bridge.IMessage
import org.aspectj.bridge.MessageHandler
import org.aspectj.tools.ajc.Main
import com.android.build.gradle.api.ApplicationVariant
apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"

    defaultConfig {
        applicationId "com.example.aopstudy"
        minSdkVersion 16
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        multiDexEnabled true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.core:core-ktx:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    implementation 'com.android.support:multidex:1.0.3'

    //aop
    implementation 'org.aspectj:aspectjtools:1.8.9'


}



apply plugin: AopPlugin
class AopPlugin implements Plugin<Project> {
    void apply(Project project) {
        AppExtension appExtension =  project.extensions.getByType(AppExtension.class)
        final def variants = appExtension.applicationVariants
        variants.all { variant ->
            JavaCompile javaCompile = variant.javaCompile
            javaCompile.doLast {
                String[] args = ["-showWeaveInfo",
                                 "-1.8",
                                 "-inpath", javaCompile.destinationDir.toString(),
                                 "-aspectpath", javaCompile.classpath.asPath,
                                 "-d", javaCompile.destinationDir.toString(),
                                 "-classpath", javaCompile.classpath.asPath,
                                 "-bootclasspath", appExtension.bootClasspath[0],
                                 "-inpath", project.buildDir.absolutePath+File.separator+"tmp\\kotlin-classes",//支持kotlin Aop
                                 "-Xlint:ignore","-warn:none"]

                println("AopPlugin-args:"+args)
                MessageHandler handler = new MessageHandler(true);
                new Main().run(args, handler);
                for (IMessage message : handler.getMessages(null, true)){
                    switch (message.getKind()) {
                        case IMessage.ABORT:
                        case IMessage.ERROR:
                        case IMessage.FAIL:
                            println("AopPlugin-message-FAIL"+"--message:"+message.message+"--thrown:"+message.thrown)
                           // logger.log(message.message, message.thrown)
                            break;
                        case IMessage.WARNING:
                            println("AopPlugin-message-WARNING"+"--message:"+message.message+"--thrown:"+message.thrown)
                            //logger.log(message.thrown)
                            break;
                        case IMessage.INFO:
                            println("AopPlugin-message-INFO"+"--message:"+message.message+"--thrown:"+message.thrown)
                          //  logger.log(message.message, message.thrown)
                            break;
                        case IMessage.DEBUG:
                            println("AopPlugin-message-DEBUG"+"--message:"+message.message+"--thrown:"+message.thrown)
                          //  logger.log(message.message, message.thrown)
                            break;
                    }
                }
            }
        }

    }
}